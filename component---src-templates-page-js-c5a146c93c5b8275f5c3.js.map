{"version":3,"sources":["webpack:///./src/blocks/form.js","webpack:///./src/blocks/title.js","webpack:///./src/blocks/image.js","webpack:///./src/blocks/content.js","webpack:///./src/templates/page.js"],"names":["Form","form","StyledForm","name","action","recipient","method","fields","map","field","inputType","FormField","wide","for","slugify","label","cols","rows","id","type","autocorrect","autocomplete","length","primary","value","base","key","component","FormBlock","defaultItem","description","templates","customInputBlock","nameInputBlock","emailInputBlock","phoneInputBlock","companyInputBlock","messageInputBlock","styled","props","theme","breakpoints","medium","div","radius","small","easing","color","foreground","mix","background","secondary","isDarkMode","css","p","Title","page","data","centered","center","StyledTitle","title","underline","Hr","h2","hr","Image","image","childImageSharp","ImageWrapper","fluid","ImageBlock","parse","filename","uploadDir","previewSrc","formValues","fieldProps","pathName","input","replace","imageNode","get","src","Content","html","StyledContent","dangerouslySetInnerHTML","__html","Page","useLocalJsonForm","PageForm","blocks","i","_template","content","childrenPagesJsonBlockMarkdown","childMarkdownRemark","jsonNode","hero","itemProps","item","link","TitleBlock","ContentBlock","pageQuery"],"mappings":"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","file":"component---src-templates-page-js-c5a146c93c5b8275f5c3.js","sourcesContent":["import React from \"react\"\nimport { Button } from \"../components/style\"\nimport styled, { css } from \"styled-components\"\nimport { mix } from \"polished\"\nimport slugify from \"react-slugify\"\n\nexport function Form({ form }) {\n  return (\n    <StyledForm\n      name=\"contact\"\n      action={`https://formspree.io/${form.recipient}`}\n      method=\"POST\"\n    >\n      {form.fields.map(field => {\n        if (field.inputType === \"textarea\") {\n          return (\n            <FormField wide>\n              <label for={slugify(field.label)}>{field.label}</label>\n              <textarea\n                cols=\"40\"\n                rows=\"5\"\n                name={slugify(field.label)}\n                id={slugify(field.label)}\n              ></textarea>\n            </FormField>\n          )\n        } else {\n          return (\n            <FormField>\n              <label for={slugify(field.label)}>{field.label}</label>\n              <input\n                id={slugify(field.label)}\n                name={slugify(field.label)}\n                type={field.inputType}\n                autocorrect=\"off\"\n                autocomplete={field.autocomplete | ``}\n              />\n            </FormField>\n          )\n        }\n      })}\n      {form.fields.length > 0 && (\n        <FormField wide>\n          <Button primary type=\"submit\" value=\"Submit\">\n            Submit\n          </Button>\n        </FormField>\n      )}\n    </StyledForm>\n  )\n}\n\nconst base = {\n  name: \"customInput\",\n  key: \"label\",\n  component: \"group\",\n  fields: [\n    { name: \"label\", label: \"Label\", component: \"text\" },\n    { name: \"inputType\", label: \"Input Type\", component: \"text\" },\n    { name: \"autocomplete\", label: \"Autocomplete\", component: \"text\" },\n  ],\n}\n\nexport const customInputBlock = {\n  label: \"Custom Input\",\n  ...base,\n}\n\nexport const nameInputBlock = {\n  label: \"Name Input\",\n  defaultItem: {\n    label: \"Name\",\n    inputType: \"text\",\n    autocomplete: \"name\",\n  },\n  ...base,\n}\n\nexport const emailInputBlock = {\n  label: \"Email Input\",\n  defaultItem: {\n    label: \"Email\",\n    inputType: \"text\",\n    autocomplete: \"email\",\n  },\n  ...base,\n}\n\nexport const phoneInputBlock = {\n  label: \"Phone Input\",\n  defaultItem: {\n    label: \"Phone\",\n    inputType: \"text\",\n    autocomplete: \"tel\",\n  },\n  ...base,\n}\n\nexport const companyInputBlock = {\n  label: \"Company Input\",\n  defaultItem: {\n    label: \"Company\",\n    inputType: \"text\",\n    autocomplete: \"organization\",\n  },\n  ...base,\n}\n\nexport const messageInputBlock = {\n  label: \"Message Input\",\n  defaultItem: {\n    label: \"Message\",\n    inputType: \"textarea\",\n    autocomplete: \"\",\n  },\n  ...base,\n}\n\nexport const FormBlock = {\n  label: \"Form\",\n  key: \"name\",\n  name: \"form\",\n  component: \"group\",\n  defaultItem: {\n    name: \"Form\",\n    recipient: \"\",\n    fields: [],\n  },\n  fields: [\n    { name: \"name\", label: \"Name\", component: \"text\" },\n    {\n      name: \"recipient\",\n      label: \"Recipient\",\n      description: \"Form is sent via formspree.io.\",\n      component: \"text\",\n    },\n    {\n      label: \"Fields\",\n      name: \"fields\",\n      component: \"blocks\",\n      templates: {\n        customInputBlock,\n        nameInputBlock,\n        emailInputBlock,\n        phoneInputBlock,\n        companyInputBlock,\n        messageInputBlock,\n      },\n    },\n  ],\n}\n\nexport const StyledForm = styled.form`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: auto;\n  grid-gap: 1.5rem;\n  justify-items: stretch;\n\n  @media (min-width: ${props => props.theme.breakpoints.medium}) {\n    grid-template-columns: 1fr 1fr;\n  }\n`\n\nexport const FormField = styled.div`\n  input,\n  textarea {\n    position: relative;\n    line-height: 2.25rem;\n    font-size: 1rem;\n    padding: 0 0.625rem;\n    border-radius: ${props => props.theme.radius.small};\n    border: none;\n    width: 100%;\n    transition: box-shadow 150ms ${props => props.theme.easing};\n    color: ${props => props.theme.color.foreground};\n    background-color: ${props =>\n      mix(0.95, props.theme.color.background, props.theme.color.foreground)};\n\n    &:focus {\n      outline: none;\n      box-shadow: 0 0 0 3px ${props => props.theme.color.secondary};\n    }\n\n    ${props =>\n      props.theme.isDarkMode &&\n      css`\n        background-color: ${props => props.theme.color.background};\n      `};\n  }\n\n  textarea {\n    line-height: 1.5;\n    padding: 0.5rem 0.625rem;\n    resize: vertical;\n  }\n\n  label {\n    display: block;\n    margin-bottom: 0.25rem;\n  }\n\n  ${p =>\n    p.wide &&\n    css`\n      @media (min-width: ${props => props.theme.breakpoints.medium}) {\n        grid-column-start: 1;\n        grid-column-end: 3;\n      }\n    `};\n`\n","import React from \"react\"\nimport styled, { css } from \"styled-components\"\n\nexport function Title({ page, data }) {\n  const centered = data.center ? data.center : false\n  return (\n    <>\n      <StyledTitle center={centered}>\n        {data && data.title ? data.title : page.title ? page.title : \"\"}\n      </StyledTitle>\n      {data && data.underline && <Hr center={centered} />}\n    </>\n  )\n}\n\nconst StyledTitle = styled.h2`\n  font-size: 2.2em;\n  line-height: 1.2;\n  word-spacing: 1px;\n  font-weight: 700;\n\n  ${props =>\n    props.center &&\n    css`\n      text-align: center;\n    `};\n`\n\nconst Hr = styled.hr`\n  margin: 2.2rem 0;\n\n  ${props =>\n    props.center &&\n    css`\n      margin-left: auto;\n      margin-right: auto;\n    `};\n`\n\nexport const TitleBlock = {\n  label: \"Title\",\n  name: \"title\",\n  defaultItem: {\n    title: \"\",\n    center: false,\n    underline: true,\n  },\n  fields: [\n    { name: \"title\", label: \"Title\", component: \"text\" },\n    { name: \"center\", label: \"Center\", component: \"toggle\" },\n    { name: \"underline\", label: \"Underline\", component: \"toggle\" },\n  ],\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport Img from \"gatsby-image\"\nimport get from \"lodash.get\"\n\nexport function Image({ data }) {\n  return (\n    data.image &&\n    data.image.childImageSharp && (\n      <ImageWrapper>\n        <Img fluid={data.image.childImageSharp.fluid} />\n      </ImageWrapper>\n    )\n  )\n}\n\nconst ImageWrapper = styled.div`\n  overflow: hidden;\n`\n\nexport const ImageBlock = {\n  label: \"Image\",\n  name: \"image\",\n  key: \"test\",\n  defaultItem: {\n    image: \"\",\n  },\n  fields: [\n    {\n      label: \"Image\",\n      name: \"image\",\n      component: \"image\",\n      parse: filename => `../images/${filename}`,\n      uploadDir: () => `/content/images/`,\n      previewSrc: (formValues, fieldProps) => {\n        const pathName = fieldProps.input.name.replace(\"rawJson\", \"jsonNode\")\n        const imageNode = get(formValues, pathName)\n        if (!imageNode || !imageNode.childImageSharp) return \"\"\n        return imageNode.childImageSharp.fluid.src\n      },\n    },\n  ],\n}\n","import React from \"react\"\nimport styled, { css } from \"styled-components\"\n\nexport function Content({ data, html }) {\n  const centered = data.center ? data.center : false\n  return (\n    <StyledContent\n      center={centered}\n      dangerouslySetInnerHTML={{\n        __html: html,\n      }}\n    ></StyledContent>\n  )\n}\n\nconst StyledContent = styled.div`\n  ${props =>\n    props.center &&\n    css`\n      text-align: center;\n    `};\n`\n\nexport const ContentBlock = {\n  label: \"Content\",\n  name: \"content\",\n  key: \"test\",\n  defaultItem: {\n    content: \"\",\n    center: false,\n  },\n  fields: [\n    { name: \"content\", label: \"Content\", component: \"markdown\" },\n    { name: \"center\", label: \"Center\", component: \"toggle\" },\n  ],\n}\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { Paper } from \"../components/style\"\nimport { Form, FormBlock } from \"../blocks/form\"\nimport { Title, TitleBlock } from \"../blocks/title\"\nimport { Image, ImageBlock } from \"../blocks/image\"\nimport { Content, ContentBlock } from \"../blocks/content\"\nimport { PageLayout } from \"../components/pageLayout\"\n\nimport { useLocalJsonForm } from \"gatsby-tinacms-json\"\n\nexport default function Page({ data }) {\n  const [page] = useLocalJsonForm(data.page, PageForm)\n  const blocks = page.blocks ? page.blocks : []\n\n  return (\n    <PageLayout page={page}>\n      <Paper>\n        {blocks &&\n          blocks.map(({ _template, ...data }, i) => {\n            switch (_template) {\n              case \"TitleBlock\":\n                return <Title page={page} data={data} />\n              case \"ImageBlock\":\n                return <Image data={data} />\n              case \"FormBlock\":\n                return <Form form={data} />\n              case \"ContentBlock\":\n                if (data.content && page.childrenPagesJsonBlockMarkdown[i])\n                  return (\n                    <Content\n                      data={data}\n                      html={\n                        page.childrenPagesJsonBlockMarkdown[i]\n                          .childMarkdownRemark.html\n                      }\n                    />\n                  )\n                break\n              default:\n                return true\n            }\n          })}\n      </Paper>\n    </PageLayout>\n  )\n}\n\nconst PageForm = {\n  label: \"Page\",\n  fields: [\n    {\n      label: \"Title\",\n      name: \"rawJson.title\",\n      component: \"text\",\n    },\n    {\n      label: \"Hero\",\n      name: \"rawJson.hero\",\n      component: \"group\",\n      fields: [\n        {\n          label: \"Headline\",\n          name: \"headline\",\n          component: \"text\",\n        },\n        {\n          label: \"Textline\",\n          name: \"textline\",\n          component: \"text\",\n        },\n        {\n          label: \"Image\",\n          name: \"image\",\n          component: \"image\",\n          parse: (filename) => `../images/${filename}`,\n          uploadDir: () => `/content/images/`,\n          previewSrc: (formValues, input) => {\n            if (!formValues.jsonNode.hero || !formValues.jsonNode.hero.image)\n              return \"\"\n            return formValues.jsonNode.hero.image.childImageSharp.fluid.src\n          },\n        },\n        {\n          label: \"Actions\",\n          name: \"ctas\",\n          component: \"group-list\",\n          itemProps: (item) => ({\n            key: item.link,\n            label: item.label,\n          }),\n          fields: [\n            {\n              label: \"Label\",\n              name: \"label\",\n              component: \"text\",\n            },\n            {\n              label: \"Link\",\n              name: \"link\",\n              component: \"text\",\n            },\n            {\n              label: \"Primary\",\n              name: \"primary\",\n              component: \"toggle\",\n            },\n            {\n              label: \"Arrow\",\n              name: \"arrow\",\n              component: \"toggle\",\n            },\n          ],\n        },\n        {\n          label: \"Large\",\n          name: \"large\",\n          component: \"toggle\",\n        },\n      ],\n    },\n    {\n      label: \"Page Sections\",\n      name: \"rawJson.blocks\",\n      component: \"blocks\",\n      templates: {\n        TitleBlock,\n        ImageBlock,\n        FormBlock,\n        ContentBlock,\n      },\n    },\n  ],\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    page: pagesJson(path: { eq: $path }) {\n      title\n      displayTitle\n      hero {\n        headline\n        textline\n        large\n        overlay\n        image {\n          childImageSharp {\n            fluid(quality: 70, maxWidth: 1920) {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n        ctas {\n          label\n          link\n          primary\n          arrow\n        }\n      }\n      blocks {\n        _template\n        content\n        name\n        title\n        underline\n        center\n        recipient\n        fields {\n          label\n          inputType\n          autocomplete\n        }\n        image {\n          childImageSharp {\n            fluid(quality: 70, maxWidth: 1920) {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n      }\n      childrenPagesJsonBlockMarkdown {\n        childMarkdownRemark {\n          html\n        }\n      }\n\n      rawJson\n      fileRelativePath\n    }\n  }\n`\n"],"sourceRoot":""}